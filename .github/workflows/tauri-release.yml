name: Tauri Build & Release

on:
  push:
    branches: [ "main" ]   # change if your default branch is different
  workflow_dispatch:

jobs:
  build:
    permissions:
      contents: write       # needed to create/upload releases
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: macos-latest
            args: "--target aarch64-apple-darwin"
          - platform: macos-latest
            args: "--target x86_64-apple-darwin"
          - platform: ubuntu-22.04
            args: ""
          - platform: windows-latest
            args: ""

    runs-on: ${{ matrix.platform }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js (LTS)
        uses: actions/setup-node@v4
        with:
          node-version: "lts/*"
          cache: "npm"
          cache-dependency-path: |
            tauri-app/pnpm-lock.yaml
            tauri-app/yarn.lock
            tauri-app/package-lock.json

      - name: Read version from tauri-app/package.json
        id: meta
        shell: bash
        run: |
          VER=$(node -p "require('./tauri-app/package.json').version || ''")
          if [ -z "$VER" ]; then
            echo "No version found in tauri-app/package.json"; exit 1
          fi
          echo "version=$VER" >> "$GITHUB_OUTPUT"

      - name: Skip if tag already exists
        id: checktag
        shell: bash
        run: |
          TAG="v${{ steps.meta.outputs.version }}"
          if git ls-remote --tags origin | grep -q "refs/tags/${TAG}$"; then
            echo "exists=true" >> "$GITHUB_OUTPUT"
          else
            echo "exists=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Install Rust (stable)
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: Install Linux build deps (Ubuntu)
        if: startsWith(matrix.platform, 'ubuntu-')
        run: |
          set -eux
          sudo apt-get update
          # core + gtk/glib/pipewire/etc.
          sudo apt-get install -y \
            build-essential \
            curl \
            wget \
            file \
            libssl-dev \
            libxdo-dev \
            libxkbcommon-dev \
            libayatana-appindicator3-dev || sudo apt-get install -y libayatana-appindicator-dev \
            libwebkit2gtk-4.0-dev \
            libglib2.0-dev \
            librsvg2-dev \
            libsqlite3-dev \
            libpipewire-0.3-dev \
            libgbm-dev \
            libdrm-dev \
            libegl1-mesa-dev \
            libwayland-dev \
            libx11-dev \
            libxi-dev \
            libxtst-dev

      # Install frontend deps inside tauri-app/
      - name: Install deps (pnpm)
        if: hashFiles('tauri-app/pnpm-lock.yaml') != ''
        run: |
          corepack enable
          cd tauri-app
          pnpm i --frozen-lockfile
      - name: Install deps (yarn)
        if: hashFiles('tauri-app/yarn.lock') != '' && hashFiles('tauri-app/pnpm-lock.yaml') == ''
        run: |
          corepack enable
          cd tauri-app
          yarn install --frozen-lockfile
      - name: Install deps (npm)
        if: hashFiles('tauri-app/pnpm-lock.yaml') == '' && hashFiles('tauri-app/yarn.lock') == ''
        run: |
          cd tauri-app
          npm ci

      - name: üìù Get full last commit message (with markdown)
        id: release_notes
        run: |
          echo "RELEASE_NOTES<<EOF" >> $GITHUB_ENV
          git log -1 --pretty=format:%B >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Build & upload to GitHub Release
        if: steps.checktag.outputs.exists == 'false'
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
           # If you sign/notarize on macOS, also set Apple secrets here as repo secrets:
          # APPLE_CERTIFICATE, APPLE_CERTIFICATE_PASSWORD, APPLE_ID/APPLE_PASSWORD or APPLE_API_KEY/_ID/_ISSUER, APPLE_TEAM_ID
        with:
          projectPath: tauri-app
          tagName: v${{ steps.meta.outputs.version }}
          releaseName: v${{ steps.meta.outputs.version }}
          releaseBody: |
            Installers for macOS, Linux, and Windows are attached below.

            ### Changes in this release
            ${{ env.RELEASE_NOTES }}
          releaseDraft: false
          prerelease: ${{ contains(steps.meta.outputs.version, '-alpha') || contains(steps.meta.outputs.version, '-beta') || contains(steps.meta.outputs.version, '-rc') }}
          args: ${{ matrix.args }}

      - name: Build only (no release) because tag exists
        if: steps.checktag.outputs.exists == 'true'
        run: echo "Tag v${{ steps.meta.outputs.version }} already exists. Skipping release upload."

      - name: Prefix asset names by platform on the Release
        if: steps.checktag.outputs.exists == 'false'
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const tag = `v${{ steps.meta.outputs.version }}`;

            // Get the Release created by the previous step
            let release;
            try {
              release = (await github.rest.repos.getReleaseByTag({ owner, repo, tag })).data;
            } catch (e) {
              core.warning(`Release ${tag} not found; skipping rename. ${e.message}`);
              return;
            }

            // Choose prefix from filename
            const prefixFor = (name) => {
              const n = name.toLowerCase();
              if (n.endsWith('.dmg') || n.endsWith('.pkg')) return 'mac';
              if (n.endsWith('.msi') || n.endsWith('.exe') || n.endsWith('.msix')) return 'windows';
              if (
                n.endsWith('.appimage') || n.endsWith('.deb') || n.endsWith('.rpm') ||
                n.endsWith('.tar.gz')   || n.endsWith('.tar.xz') || n.endsWith('.tar.bz2')
              ) return 'linux';
              return null;
            };

            for (const asset of release.assets) {
              const orig = asset.name;
              // avoid double-prefixing on re-runs
              if (/^(mac|linux|windows)-/i.test(orig)) continue;

              const prefix = prefixFor(orig);
              if (!prefix) continue;

              const newName = `${prefix}-${orig}`;
              await github.rest.repos.updateReleaseAsset({
                owner, repo,
                asset_id: asset.id,
                name: newName
              });
              core.info(`Renamed ${orig} ‚Üí ${newName}`);
            }