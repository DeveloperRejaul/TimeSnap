name: Tauri Build & Release

on:
  push:
    branches: [ "main" ]   # change if your default branch is different
  workflow_dispatch:

jobs:
  build:
    permissions:
      contents: write       # needed to create/upload releases
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: macos-latest
            args: "--target aarch64-apple-darwin"
          - platform: macos-latest
            args: "--target x86_64-apple-darwin"
          - platform: ubuntu-24.04
            args: ""
          - platform: windows-latest
            args: ""

    runs-on: ${{ matrix.platform }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js (LTS)
        uses: actions/setup-node@v4
        with:
          node-version: "lts/*"
          cache: "npm"
          cache-dependency-path: |
            tauri-app/pnpm-lock.yaml
            tauri-app/yarn.lock
            tauri-app/package-lock.json

      - name: Read version from tauri-app/package.json
        id: meta
        shell: bash
        run: |
          VER=$(node -p "require('./tauri-app/package.json').version || ''")
          if [ -z "$VER" ]; then
            echo "No version found in tauri-app/package.json"; exit 1
          fi
          echo "version=$VER" >> "$GITHUB_OUTPUT"

      - name: Skip if tag already exists
        id: checktag
        shell: bash
        run: |
          TAG="v${{ steps.meta.outputs.version }}"
          if git ls-remote --tags origin | grep -q "refs/tags/${TAG}$"; then
            echo "exists=true" >> "$GITHUB_OUTPUT"
          else
            echo "exists=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Install Rust (stable)
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: Install Linux build deps (Ubuntu)
        if: startsWith(matrix.platform, 'ubuntu-')
        run: |
          set -eux
          sudo apt-get update
          # core + gtk/glib/pipewire/etc.
          sudo apt-get install -y \
            libwebkit2gtk-4.1-dev \
            build-essential \
            pkg-config \
            curl wget file patchelf \
            libssl-dev \
            libglib2.0-dev \
            libgtk-3-dev \
            libayatana-appindicator3-dev \
            librsvg2-dev \
            libpipewire-0.3-dev \
            libxdo-dev \
            # rdev / X11 input
            libx11-dev \
            libxi-dev \
            libxtst-dev \
            # GPU / compositor stack used by wry/tao/webkit
            libgbm-dev \
            libdrm-dev \
            libegl1-mesa-dev \
            libwayland-dev
   
      # Install frontend deps inside tauri-app/
      - name: Install deps (pnpm)
        if: hashFiles('tauri-app/pnpm-lock.yaml') != ''
        run: |
          corepack enable
          cd tauri-app
          pnpm i --frozen-lockfile
      - name: Install deps (yarn)
        if: hashFiles('tauri-app/yarn.lock') != '' && hashFiles('tauri-app/pnpm-lock.yaml') == ''
        run: |
          corepack enable
          cd tauri-app
          yarn install --frozen-lockfile
      - name: Install deps (npm)
        if: hashFiles('tauri-app/pnpm-lock.yaml') == '' && hashFiles('tauri-app/yarn.lock') == ''
        run: |
          cd tauri-app
          npm ci

      - name: Build & upload to GitHub Release
        if: steps.checktag.outputs.exists == 'false'
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          projectPath: tauri-app
          tagName: v${{ steps.meta.outputs.version }}
          releaseName: v${{ steps.meta.outputs.version }}
          releaseBody: "Installers for macOS, Linux, and Windows are attached below."
          releaseDraft: false
          prerelease: ${{ contains(steps.meta.outputs.version, '-alpha') || contains(steps.meta.outputs.version, '-beta') || contains(steps.meta.outputs.version, '-rc') }}
          args: ${{ matrix.args }}

      - name: Build only (no release) because tag exists
        if: steps.checktag.outputs.exists == 'true'
        run: echo "Tag v${{ steps.meta.outputs.version }} already exists. Skipping release upload."